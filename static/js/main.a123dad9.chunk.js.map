{"version":3,"sources":["firebase/index.js","components/ShoppingList.js","components/Detail.js","dataFake.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ShoppingList","items","onAdd","onChange","useState","inputValue","setInputValue","image","setImage","toggleHandle","index","isSelected","className","type","value","event","target","id","aria-describedby","placeholder","style","float","width","onClick","newItem","Math","random","toString","substr","name","uploadTask","storage","ref","put","then","getDownloadURL","url","console","log","onHandleClick","e","files","map","item","key","aria-label","height","defaultChecked","src","alt","color","to","textAlign","fontSize","Detail","useParams","find","window","location","href","text","dataFake","App","setItems","path","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a123dad9.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCg67FTfV0XNZImDZRJEPgJdm3OcePFcYM\",\r\n    authDomain: \"seismic-catbird-288903.firebaseapp.com\",\r\n    databaseURL: \"https://seismic-catbird-288903.firebaseio.com\",\r\n    projectId: \"seismic-catbird-288903\",\r\n    storageBucket: \"seismic-catbird-288903.appspot.com\",\r\n    messagingSenderId: \"718601061213\",\r\n    appId: \"1:718601061213:web:71fece077162da58b35eb4\",\r\n    measurementId: \"G-JWQ0146YRY\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\nexport default firebase\r\n\r\n  // uploadTask.on(\r\n    //   \"state_changed\",\r\n    //   snapshot => { },\r\n    //   error => {\r\n    //     console.log(error);\r\n    //   },\r\n    //   () => {\r\n    //     firebase.storage()\r\n    //       .ref(\"images\")\r\n    //       .child(image.name)\r\n    //       .getDownLoadURL()\r\n    //       .then(url => {\r\n    //         console.log(url);\r\n    //       })\r\n    //   }\r\n    // )","import React, { useState } from 'react'\r\nimport firebase from '../firebase';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ShoppingList = ({ items, onAdd, onChange }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [image, setImage] = useState(null);\r\n    const handleChange = (e) => {\r\n        if (e.target.files[0]) {\r\n            setImage(e.target.files[0])\r\n        }\r\n    }\r\n    const onHandleClick = () => {\r\n        if (image === null) {\r\n            const newItem = {\r\n                id: Math.random().toString(36).substr(2, 9),\r\n                name: inputValue,\r\n                isSelected: false,\r\n                image: null\r\n            }\r\n            onAdd(newItem);\r\n        }\r\n        else {\r\n            const uploadTask = firebase.storage().ref(`images/${image.name}`);\r\n            uploadTask.put(image).then(() => {\r\n                uploadTask.getDownloadURL()\r\n                    .then((url) => {\r\n                        const newItem = {\r\n                            id: Math.random().toString(36).substr(2, 9),\r\n                            name: inputValue,\r\n                            isSelected: false,\r\n                            image: url\r\n                        }\r\n                        console.log(newItem);\r\n                        onAdd(newItem);\r\n                    })\r\n            })\r\n        }\r\n    }\r\n    const toggleHandle = (index) => {\r\n        items[index].isSelected = !items[index].isSelected;\r\n        onChange(items);\r\n    }\r\n    return (\r\n        <div className='container'>\r\n            <h1 className=\"my-5\">Shopping List.</h1>\r\n            <div className='add-item row mb-5'>\r\n                <div className=\"form-group col-7\">\r\n                    <input type=\"text\" value={inputValue} onChange={(event) => setInputValue(event.target.value)} className=\"form-control\" id=\"name\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" />\r\n                </div>\r\n                <div className='col-5'>\r\n                    <button type=\"submit\" className=\"btn btn-primary\" style={{ float: \"left\", width: 150 }} onClick={() => onHandleClick()}>Add New Item</button>\r\n                </div>\r\n                <div className=\"w-100\"></div>\r\n                <div className=\"form-group-file col-7\">\r\n                    <input type=\"file\" className=\"form-control\" onChange={handleChange} />\r\n                </div>\r\n            </div>\r\n            <div className='item-list row'>\r\n                <table className=\"table table-bordered col-7\">\r\n                    <thead>\r\n                        <tr>\r\n                            <td>Mark</td>\r\n                            <td>Product Name</td>\r\n                            <td>Image</td>\r\n                            <td>Status</td>\r\n                            <td>Detail</td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {items.map((item, index) => (\r\n                            <tr key={index}>\r\n                                <td>\r\n                                    {\r\n                                        item.isSelected === false ?\r\n                                            (\r\n                                                <input type=\"checkbox\" aria-label=\"Checkbox for following text input\" style={{ width: 25, height: 25 }} onClick={() => toggleHandle(index)} />\r\n                                            ) :\r\n                                            (\r\n                                                <input type=\"checkbox\" aria-label=\"Checkbox for following text input\" style={{ width: 25, height: 25 }} defaultChecked onClick={() => toggleHandle(index)} />\r\n                                            )\r\n                                    }\r\n                                </td>\r\n                                <td className=\"font-weight-bold\">{item.name}</td>\r\n                                <td>\r\n                                    <img src={item.image} style={{ width: 50, height: 50 }} alt='' />\r\n                                </td>\r\n                                <td>\r\n                                    {\r\n                                        item.isSelected === false ?\r\n                                            (\r\n                                                <span className=\"font-weight-bold\" style={{ color: 'red' }}>\r\n                                                    Not owned\r\n                                                </span>\r\n                                            ) :\r\n                                            (\r\n                                                <span className=\"font-weight-bold\" style={{ color: 'green' }}>\r\n                                                    Owned\r\n                                                </span>\r\n                                            )\r\n                                    }\r\n                                </td>\r\n                                <td>\r\n                                    <Link to={`/detail-product/${item.id}`} className=\"btn btn-primary\">Detail</Link>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"owner col-5\">\r\n                    <h3>Owned List</h3>\r\n                    {items.map((item, index) => (\r\n                        (\r\n                            (item.isSelected === true) ?\r\n                                (\r\n                                    <h5 key={index} style={{ textAlign: \"center\" }}>\r\n                                        <i className=\"far fa-check-circle\" style={{ color: 'green', fontSize: 35 }}></i>\r\n                                        {item.name}\r\n                                    </h5>\r\n                                ) : null\r\n                        )\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nShoppingList.propTypes = {\r\n\r\n}\r\n\r\nexport default ShoppingList\r\n","import React from 'react'\r\nimport { useParams, Link } from 'react-router-dom'\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\r\n\r\nconst Detail = ({ items }) => {\r\n    let { id } = useParams();\r\n    var item = items.find(item => item.id === id);\r\n    const url = window.location.href;\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"my-5\">Detail Product.</h1>\r\n            <div className=\"card mx-auto mb-5\" style={{ width: '36rem' }}>\r\n                <img className=\"card-img-top mx-auto mt-5 \" src={item.image} style={{ width: 300, height: 250 }} alt=\"\" />\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{item.name}</h5>\r\n                    <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\r\n                </div>\r\n                <div className=\"card-body mb-3\">\r\n                    <Link className=\"btn btn-success\" style={{ width: 66 }} to=\"/abc\">Add</Link>\r\n                    <CopyToClipboard text={url}>\r\n                        <button className=\"btn btn-primary ml-3\">Share</button>\r\n                    </CopyToClipboard>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nDetail.propTypes = {\r\n\r\n}\r\n\r\nexport default Detail\r\n","const dataFake = [\r\n    {\r\n        \"id\": \"1\",\r\n        \"name\": \"Apple\",\r\n        \"image\": \"http://lorempixel.com/640/480/abstract\",\r\n        \"price\": \"407.00\",\r\n        \"isSelected\": false\r\n    },\r\n    {\r\n        \"id\": \"2\",\r\n        \"name\": \"Banana\",\r\n        \"image\": \"http://lorempixel.com/640/480/fashion\",\r\n        \"price\": \"39.00\",\r\n        \"isSelected\": true\r\n    },\r\n    {\r\n        \"id\": \"3\",\r\n        \"name\": \"Orange\",\r\n        \"image\": \"http://lorempixel.com/640/480/city\",\r\n        \"price\": \"922.00\",\r\n        \"isSelected\": false\r\n    },\r\n\r\n]\r\nexport default dataFake;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Switch, Route, HashRouter } from 'react-router-dom';\nimport ShoppingList from './components/ShoppingList';\nimport Detail from './components/Detail'\nimport dataFake from './dataFake';\n\nfunction App() {\n  const [items, setItems] = useState(dataFake);\n  const onHandleAdd = (item) => {\n    console.log(item);\n    setItems([\n      ...items,\n      item\n    ])\n  }\n  const onChangeStatus = () => {\n    setItems([\n      ...items\n    ])\n  }\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          <Route path=\"/\" exact>\n            <ShoppingList items={items} onAdd={onHandleAdd} onChange={onChangeStatus} />\n          </Route>\n          <Route path=\"/detail-product/:id\">\n            <Detail items={items} />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div >\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}