{"version":3,"sources":["dataFake.js","firebase/index.js","App.js","serviceWorker.js","index.js"],"names":["dataFake","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useState","items","setItems","inputValue","setInputValue","image","setImage","toggleHandle","index","newItems","isSelected","className","type","value","onChange","event","target","id","aria-describedby","placeholder","style","float","width","onClick","newItem","name","isSlected","uploadTask","storage","ref","put","then","getDownloadURL","url","console","log","onHandleClick","e","files","map","item","key","aria-label","defaultChecked","src","height","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qQAwBeA,G,MAxBE,CACb,CACI,GAAM,IACN,KAAQ,QACR,MAAS,yCACT,MAAS,SACT,YAAc,GAElB,CACI,GAAM,IACN,KAAQ,SACR,MAAS,wCACT,MAAS,QACT,YAAc,GAElB,CACI,GAAM,IACN,KAAQ,SACR,MAAS,qCACT,MAAS,SACT,YAAc,K,sBCNtBC,IAASC,cAXc,CACnBC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,gDACbC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMJT,QAAf,EC8EeU,MA1Ff,WAAgB,IAAD,EACaC,mBAASZ,GADtB,mBACNa,EADM,KACCC,EADD,OAEuBF,mBAAS,IAFhC,mBAENG,EAFM,KAEMC,EAFN,OAGaJ,mBAAS,MAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAmCPC,EAAe,SAACC,GACpB,IAAMC,EAAQ,YAAOR,GACrBQ,EAASD,GAAOE,YAAcD,EAASD,GAAOE,WAC9CR,EAASO,IAEX,OACE,yBAAKE,UAAU,OACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,QAAd,iBACA,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,oBACb,2BAAOC,KAAK,OAAOC,MAAOV,EAAYW,SAAU,SAACC,GAAD,OAAWX,EAAcW,EAAMC,OAAOH,QAAQF,UAAU,eAAeM,GAAG,OAAOC,mBAAiB,YAAYC,YAAY,iBAE5K,yBAAKR,UAAU,SACb,4BAAQC,KAAK,SAASD,UAAU,kBAAkBS,MAAO,CAAEC,MAAO,OAAQC,MAAO,KAAOC,QAAS,kBAxCrF,WACpB,GAAc,OAAVlB,EAAgB,CAClB,IAAMmB,EAAU,CACdC,KAAMtB,EACNuB,WAAW,GAEPjB,EAAQ,sBAAOR,GAAP,CAAcuB,IAC5BtB,EAASO,OAEN,CACH,IAAMkB,EAAatC,EAASuC,UAAUC,IAAnB,iBAAiCxB,EAAMoB,OAC1DE,EAAWG,IAAIzB,GAAO0B,MAAK,WACzBJ,EAAWK,iBACRD,MAAK,SAACE,GACLC,QAAQC,IAAIF,GACZ,IAAMT,EAAU,CACdC,KAAMtB,EACNuB,WAAW,EACXrB,MAAO4B,GAEHxB,EAAQ,sBAAOR,GAAP,CAAcuB,IAC5BtB,EAASO,UAmB8F2B,KAAvG,iBAEF,yBAAKzB,UAAU,UACf,yBAAKA,UAAU,yBACb,2BAAOC,KAAK,OAAOD,UAAU,eAAeG,SAjDjC,SAACuB,GAChBA,EAAErB,OAAOsB,MAAM,IACjBhC,EAAS+B,EAAErB,OAAOsB,MAAM,SAkDtB,yBAAK3B,UAAU,iBACZV,EAAMsC,KAAI,SAACC,EAAMhC,GAAP,OACRgC,EAAK9B,WACJ,yBAAKC,UAAU,0BAA0B8B,IAAKjC,GAC5C,yBAAKG,UAAU,oBACb,2BAAOC,KAAK,WAAW8B,aAAW,oCAAoCC,gBAAc,EAACpB,QAAS,kBAAMhB,EAAaC,OAEnH,2BAAOG,UAAU,QAAO,6BAAM6B,EAAKf,OACnC,yBAAKd,UAAU,sBACb,yBAAKiC,IAAKJ,EAAKnC,MAAOe,MAAO,CAAEE,MAAO,GAAIuB,OAAQ,GAAIxB,MAAO,QAAUyB,IAAI,OAK7E,yBAAKnC,UAAU,0BAA0B8B,IAAKjC,GAC5C,yBAAKG,UAAU,oBACb,2BAAOC,KAAK,WAAW8B,aAAW,oCAAoCnB,QAAS,kBAAMhB,EAAaC,OAEpG,2BAAOG,UAAU,qCAAqC6B,EAAKf,MAC3D,yBAAKd,UAAU,sBACb,yBAAKiC,IAAKJ,EAAKnC,MAAOe,MAAO,CAAEE,MAAO,GAAIuB,OAAQ,GAAIxB,MAAO,QAAUyB,IAAI,cCrE3EC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.c100a23b.chunk.js","sourcesContent":["const dataFake = [\r\n    {\r\n        \"id\": \"1\",\r\n        \"name\": \"Apple\",\r\n        \"image\": \"http://lorempixel.com/640/480/abstract\",\r\n        \"price\": \"407.00\",\r\n        \"isSelected\": false\r\n    },\r\n    {\r\n        \"id\": \"2\",\r\n        \"name\": \"Banana\",\r\n        \"image\": \"http://lorempixel.com/640/480/fashion\",\r\n        \"price\": \"39.00\",\r\n        \"isSelected\": false\r\n    },\r\n    {\r\n        \"id\": \"3\",\r\n        \"name\": \"Orange\",\r\n        \"image\": \"http://lorempixel.com/640/480/city\",\r\n        \"price\": \"922.00\",\r\n        \"isSelected\": false\r\n    },\r\n\r\n]\r\nexport default dataFake;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCg67FTfV0XNZImDZRJEPgJdm3OcePFcYM\",\r\n    authDomain: \"seismic-catbird-288903.firebaseapp.com\",\r\n    databaseURL: \"https://seismic-catbird-288903.firebaseio.com\",\r\n    projectId: \"seismic-catbird-288903\",\r\n    storageBucket: \"seismic-catbird-288903.appspot.com\",\r\n    messagingSenderId: \"718601061213\",\r\n    appId: \"1:718601061213:web:71fece077162da58b35eb4\",\r\n    measurementId: \"G-JWQ0146YRY\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\nexport default firebase\r\n\r\n  // uploadTask.on(\r\n    //   \"state_changed\",\r\n    //   snapshot => { },\r\n    //   error => {\r\n    //     console.log(error);\r\n    //   },\r\n    //   () => {\r\n    //     firebase.storage()\r\n    //       .ref(\"images\")\r\n    //       .child(image.name)\r\n    //       .getDownLoadURL()\r\n    //       .then(url => {\r\n    //         console.log(url);\r\n    //       })\r\n    //   }\r\n    // )","import React, { useState } from 'react';\nimport './App.css';\nimport dataFake from './dataFake';\nimport firebase from './firebase';\n\nfunction App() {\n  const [items, setItems] = useState(dataFake);\n  const [inputValue, setInputValue] = useState('');\n  const [image, setImage] = useState(null);\n  const handleChange = (e) => {\n    if (e.target.files[0]) {\n      setImage(e.target.files[0])\n    }\n  }\n  const onHandleClick = () => {\n    if (image === null) {\n      const newItem = {\n        name: inputValue,\n        isSlected: false,\n      }\n      const newItems = [...items, newItem];\n      setItems(newItems);\n    }\n    else {\n      const uploadTask = firebase.storage().ref(`images/${image.name}`);\n      uploadTask.put(image).then(() => {\n        uploadTask.getDownloadURL()\n          .then((url) => {\n            console.log(url);\n            const newItem = {\n              name: inputValue,\n              isSlected: false,\n              image: url\n            }\n            const newItems = [...items, newItem];\n            setItems(newItems);\n          })\n      })\n    }\n  }\n  const toggleHandle = (index) => {\n    const newItems = [...items];\n    newItems[index].isSelected = !newItems[index].isSelected;\n    setItems(newItems);\n  }\n  return (\n    <div className=\"App\">\n      <div className='container'>\n        <h1 className=\"my-5\">Shopping List</h1>\n        <div className='add-item row mb-5'>\n          <div className=\"form-group col-8\">\n            <input type=\"text\" value={inputValue} onChange={(event) => setInputValue(event.target.value)} className=\"form-control\" id=\"name\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" />\n          </div>\n          <div className='col-4'>\n            <button type=\"submit\" className=\"btn btn-primary\" style={{ float: \"left\", width: 150 }} onClick={() => onHandleClick()}>Add New Item</button>\n          </div>\n          <div className=\"w-100\"></div>\n          <div className=\"form-group-file col-8\">\n            <input type=\"file\" className=\"form-control\" onChange={handleChange} />\n          </div>\n        </div>\n        <div className='item-list row'>\n          {items.map((item, index) => (\n            (item.isSelected) ? (\n              <div className=\"input-group col-12 mb-3\" key={index}>\n                <div className=\"input-group-text\">\n                  <input type=\"checkbox\" aria-label=\"Checkbox for following text input\" defaultChecked onClick={() => toggleHandle(index)} />\n                </div>\n                <label className='pl-3'><del>{item.name}</del></label>\n                <div className='img-thumbnail ml-5'>\n                  <img src={item.image} style={{ width: 50, height: 50, float: \"left\" }} alt='' />\n                </div>\n              </div>\n            ) :\n              (\n                <div className=\"input-group col-12 mb-3\" key={index}>\n                  <div className=\"input-group-text\">\n                    <input type=\"checkbox\" aria-label=\"Checkbox for following text input\" onClick={() => toggleHandle(index)} />\n                  </div>\n                  <label className='pl-3 text-decoration-line-through'>{item.name}</label>\n                  <div className='img-thumbnail ml-5'>\n                    <img src={item.image} style={{ width: 50, height: 50, float: \"left\" }} alt='' />\n                  </div>\n                </div>\n              )\n          ))}\n          {/* <div className='col-8'>\n            <img src='#' style={{ width: 50, height: 100, float: \"left\" }} />\n          </div> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}